// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/user_redis_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/nutsp/golang-clean-architecture/internal/models"
)

// MockIUserRedisRepository is a mock of IUserRedisRepository interface.
type MockIUserRedisRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRedisRepositoryMockRecorder
}

// MockIUserRedisRepositoryMockRecorder is the mock recorder for MockIUserRedisRepository.
type MockIUserRedisRepositoryMockRecorder struct {
	mock *MockIUserRedisRepository
}

// NewMockIUserRedisRepository creates a new mock instance.
func NewMockIUserRedisRepository(ctrl *gomock.Controller) *MockIUserRedisRepository {
	mock := &MockIUserRedisRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRedisRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRedisRepository) EXPECT() *MockIUserRedisRepositoryMockRecorder {
	return m.recorder
}

// GetUser mocks base method.
func (m *MockIUserRedisRepository) GetUser(ctx context.Context, id uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, id)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserRedisRepositoryMockRecorder) GetUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserRedisRepository)(nil).GetUser), ctx, id)
}

// SetUser mocks base method.
func (m *MockIUserRedisRepository) SetUser(ctx context.Context, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUser indicates an expected call of SetUser.
func (mr *MockIUserRedisRepositoryMockRecorder) SetUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockIUserRedisRepository)(nil).SetUser), ctx, user)
}
