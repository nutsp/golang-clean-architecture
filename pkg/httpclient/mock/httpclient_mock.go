// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/httpclient/httpclient.go

// Package mock_httpclient is a generated GoMock package.
package mock_httpclient

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	httpclient "github.com/nutsp/golang-clean-architecture/pkg/httpclient"
)

// MockIClient is a mock of IClient interface.
type MockIClient struct {
	ctrl     *gomock.Controller
	recorder *MockIClientMockRecorder
}

// MockIClientMockRecorder is the mock recorder for MockIClient.
type MockIClientMockRecorder struct {
	mock *MockIClient
}

// NewMockIClient creates a new mock instance.
func NewMockIClient(ctrl *gomock.Controller) *MockIClient {
	mock := &MockIClient{ctrl: ctrl}
	mock.recorder = &MockIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIClient) EXPECT() *MockIClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockIClient) Do(ctx context.Context, req *httpclient.Request) (*httpclient.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", ctx, req)
	ret0, _ := ret[0].(*httpclient.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockIClientMockRecorder) Do(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockIClient)(nil).Do), ctx, req)
}
